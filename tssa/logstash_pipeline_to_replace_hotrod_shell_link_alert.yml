input {
  exec {
    command => "/usr/share/logstash/bin/shelllinkupdownalert.sh"
    schedule => "*/60 * * * * * UTC"
    codec => multiline {
      pattern => "\n"
      what => "previous"
    }
  }
}


# Filter for site sla

filter {
  grok {
   tag_on_failure => []
   break_on_match => false
   match => [
            "message",  "tunnel_success\{instance=\"(?<instance>[^\"]+)\",job=\"(?<job>[^\"]+)\",link=\"(?<link>[^\"])\"} (?<ok>\d+) (?<epoch_millis>\d+)"
            ]
  }
  grok {
   tag_on_failure => []
   break_on_match => false
   match => [
            "job",  "^[^-]+-[^-]+-(?<sitename>.*)-(?<bu_code>.*)$"
            ]
  }
if "1" in [ok] {
  mutate {
    add_field => { "status" => "On" }

 }
}
else if "0" in [ok] {
  mutate {
    add_field => { "status" => "Off" }

  }
 }

date {
  match => [ "epoch_millis", "UNIX_MS" ]
  timezone => "Africa/Harare"
  }
  if![link]{
  drop {}
  }
if [sitename] and [link] {
  mutate {
    add_field => {"temp_instance" => "%{sitename}-%{link}"}
  }
 }

if [status] {
  aggregate {
    aggregate_maps_path => "/var/lib/logstash/.aggregate_maps_sh_link_alert"
    task_id => "%{temp_instance}"
    timeout => 31556952
    inactivity_timeout => 31556952
    code => "
      map['previous_durable_status'] ||= event.get('status')

      event.set('old_status', event.get('status'))
      event.set('previous_status', map['previous_status'])
      if (event.get('status') == 'On')
      map['alert_duration_up1'] ||= 0
      map['alert_duration_up1'] += 1
      event.set('previous_duration', map['alert_duration_up1'])
      else
        map['alert_duration_up1'] = 0
      end
      if (event.get('status') == 'Off')
        map['alert_duration_down1'] ||= 0
        map['alert_duration_down1'] += 1
        event.set('previous_duration', map['alert_duration_down1'])
      else
        map['alert_duration_down1'] = 0
      end
      if (event.get('previous_duration') > 14)
         map['previous_status'] = event.get('status')
      end
      if (event.get('previous_status') == 'On')
      map['alert_duration_up'] ||= 0
      map['alert_duration_up'] += 1
      event.set('duration', map['alert_duration_up'])
      else
        map['alert_duration_up'] = 0
      end
      if (event.get('previous_status') == 'Off')
        map['alert_duration_down'] ||= 0
        map['alert_duration_down'] += 1
        event.set('duration', map['alert_duration_down'])
      else
        map['alert_duration_down'] = 0
      end
    "
  }
 }
if ![previous_status]{
  drop {}
}

if ("On" in [previous_status] and [duration] == 1 and "1" in [link]) {
  mutate {
    add_field => { "msg_temp" => "Primary Up" }
  }
 }
if ("Off" in [previous_status] and [duration] == 1 and "1" in [link]) {
  mutate {
    add_field => { "msg_temp" => "Primary Down" }
  }
 }
if ("On" in [previous_status] and [duration] == 1 and "2" in [link]) {
  mutate {
    add_field => { "msg_temp" => "Secondary Up" }
  }
 }
if ("Off" in [previous_status] and [duration] == 1 and "2" in [link]) {
  mutate {
    add_field => { "msg_temp" => "Secondary Down" }
  }
 }
if [msg_temp]{
  mutate {
    add_field => { "[@timestamp_logstash]" => "%{[@timestamp]}" }
    add_field => { "uuid" => "%{bu_code}-%{link}-%{epoch_millis}" }
    add_field => { "alert_message" => "%{sitename}-%{bu_code}-%{msg_temp}" }
    add_field => { "hostname" => "%{sitename}-%{bu_code}" }
    add_field => { "client" => "SHELL" }
    add_field => { "alert_type" => "link_updown" }
  }
}
fingerprint {
  source => "message"
  target => "[@metadata][fingerprint]"
  method => "MD5"
  key => "sla"
 }
ruby {
  code => "event.set('[@metadata][tsprefix]', event.get('@timestamp').to_i.to_s(16))"
 }
  mutate {
    add_field => {"syslogProgram" =>  "hotrod-pipe-shell-alert-tunnel-d"}
  }


if [ok] {
  mutate {
    add_field => { "status_code" => "%{ok}"}
  }
}
 
  mutate {
    convert => [
      "ok", "integer",
      "epoch_millis", "integer",
      "status_code", "integer",
      "seconds_since", "integer",
      "link", "integer"
  ]
    remove_field => ["msg_temp", "bu_code", "sitename", "temp_instance", "message", "command", "path", "status", "alert_duration_down", "alert_duration_up", "ok"]
  }
}
# Output to  Elasticsearch cluster
output{
if [alert_message] {
  elasticsearch {
    index => "logstash-shell-alert-tunnel-%{+YYYY.MM.dd}"
    hosts => ["196.9.88.116:9200", "196.9.88.117:9200", "196.9.88.118:9200"]
    document_id => "%{[@metadata][tsprefix]}%{[@metadata][fingerprint]}"
   }
  pipeline { send_to => [alertPipeline] }
#  stdout{codec=>rubydebug}
 }
#    influxdb {                                                                                                                                                                                
#      host => "192.168.26.104"                                                                                                                                                                      
#      port => 8086                                                                                                                                                                              
#      ssl => "false"                                                                                                                                                                            
#      db => "logstashJDPsiteSLA"                                                                                                                                                                          
#      codec => "json"                                                                                                                                                                          
#      send_as_tags => ["host", "status", "dest_port", "instance", "org", "businesshours", "job", "country_code", "bu_code", "device_name","SCW", "total_business_hours", "target", "siteName", "job_status" ]                                                                                                                              
#      use_event_fields_for_data_points => true
#      data_points => {}
#      exclude_fields => ["@timestamp_logstash", "@timestamp", "@version", "type", "tags", "host"]
# }
}
