# Last changes were done on the 12 November 2020.
input {
  exec {
    command => "/usr/share/logstash/bin/jdgsitesla.sh"
    schedule => "*/60 * * * * * UTC"
    codec => multiline {
      pattern => "\n"
      what => "previous"
    }
  }
}

# Filter for site sla

filter {
  grok {
   tag_on_failure => []
   break_on_match => false
   match => [
            "message",  "probe_success\{instance=\"(?<instance>[^\"]+)\",job=\"(?<job>[^\"]+)\"\} (?<ok>\d+) (?<epoch_millis>\d+)"
            ]
  } 
  grok {
   tag_on_failure => []
   break_on_match => false
   match => [
            "job",  "[^-]+-[^-]+-[^-]+-[^-]+-(?<org>[^-]+)-",
            "job",  "^(?<job_status>[^-]+)-(?<device_name>.*)-(?<bu_code>[^\n]+)$",
            "instance",  "^\w{2}(?<country_code>.*)SD\-[^:]+(?<interface>\d+):(?<dest_port>\d+)$"
            ]
  }
if "1" in [ok] {
  mutate {
    add_field => { "status" => "On" }

 }
}
else if "0" in [ok] {
  mutate {
    add_field => { "status" => "Off" }

  }
 }
  mutate {
    add_field => { "[@timestamp_logstash]" => "%{[@timestamp]}" }
  }

date {
  match => [ "epoch_millis", "UNIX_MS" ]
  timezone => "Africa/Johannesburg"
  }
  if [interface] != "0"{
  drop {}
  }

if [status] {
  aggregate {
    task_id => "%{job}"
    aggregate_maps_path => "/var/lib/logstash/.aggregate_maps_jdg_site_sla"
    timeout => 31556952
    inactivity_timeout => 31556952
    code => "
      map['previous_durable_status'] ||= event.get('status')

      event.set('old_status', event.get('status'))
      event.set('previous_status', map['previous_status'])
      if (event.get('status') == 'On')
      map['sla_duration_up1'] ||= 0
      map['sla_duration_up1'] += 1
      event.set('previous_duration', map['sla_duration_up1'])
      else
        map['sla_duration_up1'] = 0
      end
      if (event.get('status') == 'Off')
        map['sla_duration_down1'] ||= 0
        map['sla_duration_down1'] += 1
        event.set('previous_duration', map['sla_duration_down1'])
      else
        map['sla_duration_down1'] = 0
      end
      if (event.get('previous_duration') > 14)
         map['previous_status'] = event.get('status')
         event.set('previous_epoch', map['previous_epcho'])
      end
      if (event.get('previous_status') == 'On')
      map['sla_duration_up'] ||= 0
      map['sla_duration_up'] += 1
      event.set('duration', map['sla_duration_up'])
      else
        map['sla_duration_up'] = 0
      end
      if (event.get('previous_status') == 'Off')
        map['sla_duration_down'] ||= 0
        map['sla_duration_down'] += 1
        event.set('duration', map['sla_duration_down'])
      else
        map['sla_duration_down'] = 0
      end
    "
  }
 }
if ![previous_status]{
  drop {}
}
fingerprint {
  source => "message"
  target => "[@metadata][fingerprint]"
  method => "MD5"
  key => "sla"
 }
ruby {
  code => "event.set('[@metadata][tsprefix]', event.get('@timestamp').to_i.to_s(16))"
 }
  mutate {
    add_field => {"[tbwweekday]" => "%{+e}"}
    remove_field => ["message", "command", "path", "sla_duration_down", "sla_duration_down1", "sla_duration_up1", "sla_duration_up"]
  }
  mutate {
    add_field => {"amadate" => "true"}
  }
  grok {
   tag_on_failure => []
   break_on_match => false
   match => [
            "@timestamp",  "(?<week_hour>\d+):\d+:\d+.\d+Z"
            ]
  }
if [amadate] {
  translate {
    dictionary_path => "/etc/logstash/conf.d/lookup_generator/total_sun_days.csv"
    destination => "total_sun_days"
    field => "amadate"
    fallback => "unknown"
    override => "true"
   }

  translate {
    dictionary_path => "/etc/logstash/conf.d/lookup_generator/total_sat_days.csv"
    destination => "total_sat_days"
    field => "amadate"
    fallback => "unknown"
    override => "true"
   }

  translate {
    dictionary_path => "/etc/logstash/conf.d/lookup_generator/total_work_days.csv"
    destination => "total_work_days"
    field => "amadate"
    fallback => "unknown"
    override => "true"
   }

  translate {
    dictionary_path => "/etc/logstash/conf.d/lookup_generator/total_days_m.csv"
    destination => "total_days_m"
    field => "amadate"
    fallback => "unknown"
    override => "true"
   }
 }
if [bu_code] {
  translate {
    dictionary_path => "/etc/logstash/conf.d/site_sla/sla_sitename.csv"
    destination => "siteName"
    field => "bu_code"
    fallback => "unknown"
    override => "true"
 }
  translate {
    dictionary_path => "/etc/logstash/conf.d/site_sla/sla_scw.csv"
    field => "bu_code"
    destination => "SCW"
    fallback => "unknown"
    override => "true"
 }
  translate {
    dictionary_path => "/etc/logstash/conf.d/site_sla/sla_target.csv"
    field => "bu_code"
    destination => "target"
    fallback => "unknown"
    override => "true"
 }
}
if [bu_code] and "1" in [tbwweekday]  or "2" in [tbwweekday] or "3" in [tbwweekday] or "4" in [tbwweekday] or "5" in [tbwweekday]{
  translate {
    dictionary_path => "/etc/logstash/conf.d/site_sla/sla_week_s.csv"
    field => "bu_code"
    destination => "week_s"
    fallback => "6"
    override => "true"
 }
}
if [bu_code] and "1" in [tbwweekday]  or "2" in [tbwweekday] or "3" in [tbwweekday] or "4" in [tbwweekday] or "5" in [tbwweekday]{
  translate {
    dictionary_path => "/etc/logstash/conf.d/site_sla/sla_week_e.csv"
    field => "bu_code"
    destination => "week_e"
    fallback => "15"
    override => "true"
 }
}
else if [bu_code] and "6" in [tbwweekday]{
  translate {
    dictionary_path => "/etc/logstash/conf.d/site_sla/sla_sat_s.csv"
    field => "bu_code"
    destination => "sat_s"
    fallback => "6"
    override => "true"
 }
  translate {
    dictionary_path => "/etc/logstash/conf.d/site_sla/sla_sat_e.csv"
    field => "bu_code"
    destination => "sat_e"
    fallback => "11"
    override => "true"
 }
}
else if [bu_code] and "7" in [tbwweekday]{
  translate {
    dictionary_path => "/etc/logstash/conf.d/site_sla/sla_sun_s.csv"
    field => "bu_code"
    destination => "sun_s"
    fallback => "0"
    override => "true"
 }
  translate {
    dictionary_path => "/etc/logstash/conf.d/site_sla/sla_sun_e.csv"
    field => "bu_code"
    destination => "sun_e"
    fallback => "0"
    override => "true"
 }
}
mutate {
  convert => [ 
    "week_s", "integer",
    "week_e", "integer",
    "sla_up", "integer",
    "sla_down", "integer",
    "sla_duration_down", "integer",
    "sla_duration_up", "integer",
    "week_hour", "integer"
   ]
  }

if [week_s] {
ruby {
code => '
event.set("weeks_s", event.get("week_s").to_i);
event.set("weeks_e", event.get("week_e").to_i - 1);
event.set("weeks_hour", event.get("week_hour").to_i);
if  event.get("weeks_hour").to_i >= event.get("weeks_s").to_i and event.get("weeks_hour").to_i <= event.get("weeks_e").to_i
event.set("businesshours", "true")
end
'
 }
}
if [sat_s] {
ruby {
code => '
event.set("sats_s", event.get("sat_s").to_i);
event.set("sats_e", event.get("sat_e").to_i - 1);
event.set("weeks_hour", event.get("week_hour").to_i);
if  event.get("weeks_hour").to_i >= event.get("sats_s").to_i and event.get("weeks_hour").to_i <= event.get("sats_e").to_i
event.set("businesshours", "true")
end
'
 }
}
if [sun_s] {
ruby {
code => '
event.set("suns_s", event.get("sun_s").to_i);
event.set("suns_e", event.get("sun_e").to_i - 1);
event.set("weeks_hour", event.get("week_hour").to_i);
if  event.get("weeks_hour").to_i >= event.get("suns_s").to_i and event.get("weeks_hour").to_i <= event.get("suns_e").to_i
event.set("businesshours", "true")
end
'
 }
}
if![businesshours] {
  mutate{
    add_field => {"businesshours" => "false"}
  }
}
mutate {
  convert => [ 
    "tbwweekday", "integer",
    "up_time", "integer",
    "ok", "integer",
    "dest_port", "integer",
    "down_time", "integer",
    "sla_limit", "integer",
    "duration", "integer"
   ]
 }

if "On" in [status] {
mutate {
  add_field => { "sla" => "1"}
   }
  }

if "Off" in [status]  and [previous_duration] < 16 {
mutate {
  add_field => { "sla" => "1"}
   }
  }
if "Off" in [status]  and [previous_duration] > 15 {
mutate {
  add_field => { "sla" => "0"}
   }
  }
if "0" in [sla] and "true" in [businesshours]  {
mutate {
  add_field => { "sla_duration" => "60"}
   }
  }
else {
mutate {
  add_field => { "sla_duration" => "0"}
   }
  }
if "Off" in [status] and "true" in [businesshours]  {
mutate {
  add_field => { "businesshours_down" => "60"}
   }
  }
else {
mutate {
  add_field => { "businesshours_down" => "0"}
   }
  }
if "On" in [status] and "true" in [businesshours]  {
mutate {
  add_field => { "businesshours_up" => "60"}
   }
  }
else {
mutate {
  add_field => { "businesshours_up" => "0"}
   }
  }
mutate {
  convert => [ 
    "interface", "integer",
    "sla", "integer"
    ]
 }

mutate {
  remove_field => ["amadate", "tbwweekday", "suns_s", "suns_e", "sun_s", "sun_e", "sat_s", "sat_e", "sats_s", "sats_e", "weeks_e", "weeks_s", "week_e", "week_s", "week_hour", "weeks_hour"]
 }
mutate {
  convert => {
    "total_sun_days" => "integer"
    "total_sat_days" => "integer"
    "total_work_days" => "integer"
    "sla_duration" => "integer"
    "total_days_m" => "integer"
 }
}
if [SCW] == "24 x 7 x 365"{
  ruby {
  code => "event.set('total_business_hours_temp', (event.get('total_days_m').to_i * 24) - 1)"
    }
  }

if [SCW] == "6-22. x 6"{
  ruby {
  code => "event.set('total_business_hours_temp', ((event.get('total_work_days').to_i + event.get('total_sat_days').to_i) * 17) - 1)"
    }
  }
if [SCW] == "8-5. x 7" {
  ruby {
  code => "event.set('total_business_hours_temp', (event.get('total_days_m').to_i * 9) - 1)"
    }
  }
if [SCW] ==  "8-5. 8-1. 0"{
  ruby {
  code => "event.set('total_business_hours_temp', ((event.get('total_work_days').to_i * 9) + (event.get('total_sat_days').to_i * 5)) - 1)"
    }
  }
if [SCW] == "8-5. 8-1. 9-1"{
  ruby {
  code => "event.set('total_business_hours_temp', ((event.get('total_work_days').to_i * 9 ) + (event.get('total_sat_days').to_i * 5) + (event.get('total_sun_days').to_i * 4)) - 1)"
    }
  }
if [SCW] =="unknown" {
  mutate {
    add_field => {"total_business_hours" => "0"}
    remove_field => ["total_days_m", "total_work_days", "total_sat_days", "total_sun_days", "total_days_m_t", "total_work_days_t", "total_sat_days_t", "total_sun_days_t"]
  }
}
if [total_business_hours_temp] {
  mutate {
    add_field => { "total_business_hours" => "%{total_business_hours_temp}:59:59"}
    remove_field => ["total_days_m", "total_work_days", "total_sat_days", "total_sun_days", "total_days_m_t", "total_work_days_t", "total_sat_days_t", "total_sun_days_t", "total_business_hours_temp"]
   }
  }
mutate {
  remove_field => ["tbwweekday", "suns_s", "suns_e", "sun_s", "sun_e", "sat_s", "sat_e", "sats_s", "sats_e", "weeks_e", "weeks_s", "week_e", "week_s", "week_hour", "weeks_hour"]
 }
}

# Output to  Elasticsearch cluster
output{
#  stdout{codec=>rubydebug}
  elasticsearch {
    index => "logstash-jdg-sla-availability-%{+YYYY.MM.dd}"
    hosts => ["196.9.88.116:9200", "196.9.88.117:9200", "196.9.88.118:9200"]
    document_id => "%{[@metadata][tsprefix]}%{[@metadata][fingerprint]}"
   }
#    influxdb {                                                                                                                                                                                
#      host => "192.168.26.104"                                                                                                                                                                      
#      port => 8086                                                                                                                                                                              
#      ssl => "false"                                                                                                                                                                            
#      db => "logstashJDPsiteSLA"                                                                                                                                                                          
#      codec => "json"                                                                                                                                                                          
#      send_as_tags => ["host", "status", "dest_port", "instance", "org", "businesshours", "job", "country_code", "bu_code", "device_name","SCW", "total_business_hours", "target", "siteName", "job_status" ]                                                                                                                              
#      use_event_fields_for_data_points => true
#      data_points => {}
#      exclude_fields => ["@timestamp_logstash", "@timestamp", "@version", "type", "tags", "host"]
# }
}
